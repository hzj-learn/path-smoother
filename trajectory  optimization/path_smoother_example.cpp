#include "vec2d.h"
#include "path_smoother.h"
#include<opencv2/core.hpp>

std::vector<Vec2d> GenerateCVPath() {
  std::vector<Vec2d> cv_path;

  //circle arc, corresponding to middle_lane.png
//  std::vector<double> xlist = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198};
//  std::vector<double> ylist = {61.8034, 69.5606, 80.2562, 66.8931, 68.4736, 70, 71.4743, 72.8983, 74.2739, 75.6025, 76.8858, 78.1249, 79.3213, 80.4761, 81.5903, 82.665, 83.7012, 84.6997, 85.6613, 86.587, 87.4773, 88.3329, 89.1546, 89.9428, 90.6983, 91.4214, 92.1126, 92.7725, 93.4015, 94, 94.5683, 95.1069, 95.6159, 96.0959, 96.5469, 96.9694, 97.3635, 97.7295, 98.0676, 98.3779, 98.6607, 98.9161, 99.1442, 99.3452, 99.5192, 99.6663, 99.7865, 99.88, 99.9467, 99.9867, 100, 99.9867, 99.9467, 99.88, 99.7865, 99.6663, 99.5192, 99.3452, 99.1442, 98.9161, 98.6607, 98.3779, 98.0676, 97.7295, 97.3635, 96.9694, 96.5469, 96.0959, 95.6159, 95.1069, 94.5683, 94, 93.4015, 92.7725, 92.1126, 91.4214, 90.6983, 89.9428, 89.1546, 88.3329, 87.4773, 86.587, 85.6613, 84.6997, 83.7012, 82.665, 81.5903, 80.4761, 79.3213, 78.1249, 76.8858, 75.6025, 74.2739, 72.8983, 71.4743, 70, 68.4736, 66.8931, 65.2562, 63.5606};

  //circle arc with random noise, corresponding to circle_lane.png
//  std::vector<double> xlist = {3.15688, 9.30408, 10.6037, 14.5231, 20.5603, 24.0808, 28.6036, 30.6424, 36.7692, 41.4477, 42.7181, 47.8092, 51.3247, 57.193, 60.0136, 63.9819, 66.7212, 73.2415, 74.6503, 78.8761, 84.3886, 89.1657, 92.0398, 97.0245, 99.9038, 104.215, 107.995, 113.172, 115.138, 119.324, 124.629, 127.453, 132.544, 134.943, 141.366, 143.726, 147.966, 151.099, 156.454, 159.929, 165.205, 167.731, 170.987, 174.905, 179.857, 183.146, 189.083, 192.953, 196.398};
//  std::vector<double> ylist = {72.5366, 77.1037, 81.6734, 84.3977, 90.734, 93.3273, 96.7866, 98.3584, 101.105, 104.683, 107.286, 108.081, 108.981, 110.324, 112.594, 113.245, 115.307, 116.581, 118.386, 118.887, 119.605, 118.817, 120.771, 119.679, 119.035, 118.532, 120.478, 120.425, 117.82, 118.064, 116.795, 117.144, 115.318, 115.509, 112.082, 111.837, 111.365, 108.536, 107.041, 103.033, 100.435, 100.031, 95.596, 92.7314, 90.7377, 86.9239, 81.6022, 76.9322, 72.9741};

  //sin curve with random noise, corresponding to sin_lane.png
  std::vector<double> xlist = {8.31376, 22.6082, 27.2074, 37.0462, 59.1206, 60.1616, 71.2071, 100.2848, 91.5385, 102.895, 107.436, 119.618, 128.649, 142.386, 150.027, 159.964, 167.442, 182.483, 187.301, 197.752, 210.777, 222.331, 230.08, 242.049, 249.808, 260.43, 269.991, 282.344, 288.277, 298.648, 311.259, 318.905, 331.088, 337.885, 352.732, 359.453, 369.931, 378.199, 390.908, 399.859, 412.41, 419.462, 427.973, 437.811, 449.714, 458.291, 472.165, 481.905, 490.796, 501.213, 508.736, 519.484, 531.378, 590.239, 550.15, 559.934, 572.5, 577.835, 589.676, 599.638, 608.269, 620.698, 631.364, 641.083, 651.972, 660.777, 669.333, 678.615, 691.703, 697.068, 711.918, 718.061, 728.543, 740.808, 751.518, 760.589, 767.705, 780.528, 787.97};
  std::vector<double> ylist = {320.088, 316.201, 311.459, 309.122, 299.151, 287.946, 277.892, 263.691, 251.707, 241.52, 229.793, 215.145, 201.68, 190.341, 182.346, 172.823, 168.024, 163.702, 162.606, 161.131, 162.337, 162.753, 170.795, 174.771, 181.501, 190.176, 205.171, 217.331, 225.268, 239.486, 250.954, 265.634, 275.646, 289.096, 294.457, 305.111, 314.047, 316.86, 320.834, 318.22, 316.867, 318.398, 310.473, 304.453, 299.159, 289.476, 276.355, 264.495, 254.463, 242.726, 227.572, 217.538, 204.975, 190.092, 180.823, 176.371, 171.06, 166.852, 161.073, 161.84, 158.907, 160.921, 168.226, 177.297, 180.922, 191.258, 206.366, 213.983, 226.178, 242.899, 251.904, 262.668, 273.929, 288.791, 297.369, 303.634, 311.437, 317.302, 321.176};

  
  // cv::Mat img=cv::imread("../map_imgs/sin_lane.png");
  for(int i=0; i<xlist.size()-1; i++) {
    cv_path.emplace_back(xlist[i], ylist[i]);
    // std::cout<<"888="<<cv_path.size()<<std::endl;
    // cv::circle(img, cv::Point(xlist[i], ylist[i]), 1, cv::Scalar(0,0,0), 5);
    // line(img, cv::Point(xlist[i], ylist[i]), cv::Point(xlist[i+1], ylist[i+1]), cv::Scalar(0, 255, 255), 3);

  }
    // cv::imshow("smoothed path", img);
    // cv::waitKey();
  // cv::imshow("画板", img);
	// cv::waitKey();
  return cv_path;
}

int main(int argc, char** argv) {
  // auto map_img = cv::imread("../map_imgs/sin_lane.png", 0);
//  auto map_img = cv::imread("../map_imgs/circle_lane.png", 0);
//  auto map_img = cv::imread("../map_imgs/middle_lane.png", 0);
  cv::Mat img = cv::Mat::zeros(cv::Size(800, 600), CV_8UC3);
	
	img.setTo(255);              // 设置屏幕为白色
  // if(map_img.empty()) {
  //   std::cout << "load map image failed" << std::endl;
  //   return -1;
  // }
  // std::cout<<"hello"<<std::endl;


  PathSmoother sm(img, GenerateCVPath());
  sm.smoothPath();
  return 0;
}
